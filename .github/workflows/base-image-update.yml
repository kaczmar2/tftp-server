name: Base Image Update Check

on:
  schedule:
    # Check daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      dry_run:
        description: 'Dry run mode (check only, no build/deploy)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: write
  packages: write

jobs:
  check-base-image:
    runs-on: ubuntu-latest
    outputs:
      should-rebuild: ${{ steps.check.outputs.should-rebuild }}
      digest: ${{ steps.check.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for base image updates
      id: check
      env:
        GH_TOKEN: ${{ secrets.GH_ACTIONS_PAT }}
      run: |
        # Get the digest using docker pull (multi-platform images require this approach)
        CURRENT_DIGEST=$(docker pull alpine:latest 2>&1 | grep "Digest:" | sed 's/.*Digest: //' || echo "")
        
        # Get the digest from GitHub repository variable using REST API
        echo "Fetching last digest from GitHub..."
        API_URL="https://api.github.com/repos/${{ github.repository }}/actions/variables/LAST_BASE_DIGEST"
        
        API_RESPONSE=$(curl -sL \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer $GH_TOKEN" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "$API_URL")
        
        # Check if API call was successful
        if echo "$API_RESPONSE" | jq -e '.value' >/dev/null 2>&1; then
          echo "✅ Successfully retrieved variable"
        else
          echo "❌ Failed to retrieve variable:"
          echo "$API_RESPONSE"
        fi
        
        LAST_DIGEST=$(echo "$API_RESPONSE" | jq -r '.value // ""' 2>/dev/null || echo "")
        
        echo "Current digest: $CURRENT_DIGEST"
        echo "Last digest: $LAST_DIGEST"
        
        if [ "$CURRENT_DIGEST" != "$LAST_DIGEST" ] && [ "$CURRENT_DIGEST" != "" ]; then
          echo "Base image has been updated!"
          echo "should-rebuild=true" >> $GITHUB_OUTPUT
          echo "digest=$CURRENT_DIGEST" >> $GITHUB_OUTPUT
          
          # Save digest to GitHub variable using REST API
          echo "Updating GitHub variable..."
          
          UPDATE_RESPONSE=$(curl -sL -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "$API_URL" \
            -d "{\"name\":\"LAST_BASE_DIGEST\",\"value\":\"$CURRENT_DIGEST\"}")
          
          if [ -z "$UPDATE_RESPONSE" ]; then
            echo "✅ Successfully updated variable"
          else
            echo "❌ Failed to update variable:"
            echo "$UPDATE_RESPONSE"
          fi
        else
          echo "Base image has not changed"
          echo "should-rebuild=false" >> $GITHUB_OUTPUT
        fi

  build-test-deploy:
    needs: check-base-image
    if: needs.check-base-image.outputs.should-rebuild == 'true' && inputs.dry_run != true
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Get the latest commit with the updated digest
        ref: main
        fetch-depth: 0  # Fetch all history for proper version calculation
        
    - name: Calculate next version
      id: version
      run: |
        # Get the latest tag, or start with 1.0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Remove 'v' prefix if present
        VERSION=${LATEST_TAG#v}
        
        # Parse version components
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]:-1}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        NEW_TAG="v$NEW_VERSION"
        
        echo "Preserving major.minor: $MAJOR.$MINOR"
        echo "Incrementing patch: $PATCH -> $NEW_PATCH"
        echo "New version: $NEW_VERSION"
        echo "New tag: $NEW_TAG"
        
        # Set outputs
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Install TFTP client
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq tftp-hpa
        
    - name: Build Docker image (single platform for testing)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: false
        tags: kaczmar2/tftp-server:base-update-test
        load: true
        
    - name: Set up TFTP test environment
      run: |
        # Set up Docker bind mount
        sudo mkdir -p /srv/docker/tftp
        sudo chown -R $USER:$USER /srv/docker
        sudo chmod -R 755 /srv/docker/tftp
        
    - name: Test image can start
      run: |
        # Start container in TFTP-only mode
        docker run -d \
          --name tftp-test \
          --network host \
          -e TZ=America/Denver \
          -e ENABLE_WEBSERVER=false \
          -v /srv/docker/tftp:/srv/tftp \
          kaczmar2/tftp-server:base-update-test
          
        # Wait for startup
        sleep 3
        
        # Check if container is running
        docker ps | grep tftp-test
        
        # Check logs for startup message
        docker logs tftp-test | grep "Starting TFTP server with process supervisor"
        
    - name: Test TFTP functionality
      run: |
        # Change to temp directory for test
        cd /tmp
        
        # Test TFTP download
        uname -a | sudo tee /srv/docker/tftp/test
        echo "get test" | tftp localhost
        
        # Verify file was downloaded and content matches
        if [ -f test ]; then
          echo "✅ File downloaded successfully"
          if diff test /srv/docker/tftp/test; then
            echo "✅ File content matches"
          else
            echo "❌ File content differs"
            echo "Downloaded file:"
            cat test
            echo "Original file:"
            cat /srv/docker/tftp/test
            exit 1
          fi
        else
          echo "❌ File was not downloaded"
          exit 1
        fi
        
        # Check TFTP logs for request
        docker logs tftp-test | grep "RRQ from"
        
    - name: Test TFTP upload functionality
      run: |
        # Stop existing container
        docker stop tftp-test || true
        docker rm tftp-test || true
        
        # Set permissions for upload testing
        sudo chmod -R 777 /srv/docker/tftp
        
        # Start container with upload capability (--create flag)
        docker run -d \
          --name tftp-test \
          --network host \
          -e TZ=America/Denver \
          -e ENABLE_WEBSERVER=false \
          -e TFTP_ARGS="--foreground --secure --create --verbosity 4 --user nobody" \
          -v /srv/docker/tftp:/srv/tftp \
          kaczmar2/tftp-server:base-update-test
          
        # Wait for startup
        sleep 3
        
        # Test file upload
        cd /tmp
        echo "upload test content" > upload-test.txt
        tftp localhost <<'EOF'
        binary
        put upload-test.txt
        quit
        EOF
        
        # Verify uploaded file exists and has correct content
        if [ -f /srv/docker/tftp/upload-test.txt ]; then
          echo "✅ File uploaded successfully"
          if diff upload-test.txt /srv/docker/tftp/upload-test.txt; then
            echo "✅ Uploaded file content matches"
          else
            echo "❌ Uploaded file content differs"
            echo "Original file:"
            cat upload-test.txt
            echo "Uploaded file:"
            cat /srv/docker/tftp/upload-test.txt
            exit 1
          fi
        else
          echo "❌ File was not uploaded"
          exit 1
        fi
        
        # Check TFTP logs for upload request
        docker logs tftp-test | grep "WRQ from"
        
    - name: Cleanup test container
      if: always()
      run: |
        docker stop tftp-test || true
        docker rm tftp-test || true
        rm -f /tmp/test /tmp/upload-test.txt

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          kaczmar2/tftp-server
          ghcr.io/${{ github.repository_owner }}/tftp-server
        tags: |
          type=semver,pattern={{version}},value=${{ steps.version.outputs.tag }}
        labels: |
          org.opencontainers.image.description=TFTP server with optional mini_httpd web server based on Alpine Linux

    - name: Build and push to registries
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        outputs: type=image,annotation-index.org.opencontainers.image.description=TFTP server with optional mini_httpd web server based on Alpine Linux
        
    - name: Create Git Tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "${{ steps.version.outputs.tag }}" -m "Automatic base image update: ${{ needs.check-base-image.outputs.digest }}"
        git push origin "${{ steps.version.outputs.tag }}"
        
