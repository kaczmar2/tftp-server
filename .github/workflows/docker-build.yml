name: Docker Build, Test and Publish

on:
  push:
    branches: [ "*" ]
    tags: 
      - v*
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Install TFTP client
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq tftp-hpa
      
    - name: Build Docker image (single platform for testing)
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: false
        tags: kaczmar2/tftp-server:test
        load: true
        
    - name: Set up TFTP test environment
      run: |
        # Set up Docker bind mounts
        sudo mkdir -p /srv/docker/tftp /srv/docker/www
        sudo chown -R $USER:$USER /srv/docker
        sudo chmod -R 755 /srv/docker/tftp /srv/docker/www
        
    - name: Test TFTP-only mode
      run: |
        # Start container in TFTP-only mode
        docker run -d \
          --name tftp-test \
          --network host \
          -e TZ=America/Denver \
          -e ENABLE_WEBSERVER=false \
          -v /srv/docker/tftp:/srv/tftp \
          kaczmar2/tftp-server:test
          
        # Wait for startup
        sleep 3
        
        # Check if container is running
        docker ps | grep tftp-test
        
        # Check logs for startup message
        docker logs tftp-test | grep "Starting TFTP server"
        docker logs tftp-test | grep "TFTP only mode"
        
    - name: Test TFTP functionality
      run: |
        # Test TFTP download
        cd /tmp
        uname -a | sudo tee /srv/docker/tftp/test
        echo "get test" | tftp localhost
        
        # Verify file was downloaded and content matches
        if [ -f test ]; then
          echo "✅ File downloaded successfully"
          if diff test /srv/docker/tftp/test; then
            echo "✅ File content matches"
          else
            echo "❌ File content differs"
            echo "Downloaded file:"
            cat test
            echo "Original file:"
            cat /srv/docker/tftp/test
            exit 1
          fi
        else
          echo "❌ File was not downloaded"
          exit 1
        fi
        
        # Check TFTP logs for request
        docker logs tftp-test | grep "RRQ from"
        
    - name: Test TFTP upload functionality
      run: |
        # Stop existing container
        docker stop tftp-test || true
        docker rm tftp-test || true
        
        # Set permissions for upload testing
        sudo chmod -R 777 /srv/docker/tftp
        
        # Start container with upload capability (--create flag)
        docker run -d \
          --name tftp-test \
          --network host \
          -e TZ=America/Denver \
          -e ENABLE_WEBSERVER=false \
          -e TFTP_ARGS="--foreground --secure --create --verbosity 4 --user nobody" \
          -v /srv/docker/tftp:/srv/tftp \
          kaczmar2/tftp-server:test
          
        # Wait for startup
        sleep 3
        
        # Test file upload
        cd /tmp
        echo "upload test content" > upload-test.txt
        tftp localhost <<'EOF'
        binary
        put upload-test.txt
        quit
        EOF
        
        # Verify uploaded file exists and has correct content
        if [ -f /srv/docker/tftp/upload-test.txt ]; then
          echo "✅ File uploaded successfully"
          if diff upload-test.txt /srv/docker/tftp/upload-test.txt; then
            echo "✅ Uploaded file content matches"
          else
            echo "❌ Uploaded file content differs"
            echo "Original file:"
            cat upload-test.txt
            echo "Uploaded file:"
            cat /srv/docker/tftp/upload-test.txt
            exit 1
          fi
        else
          echo "❌ File was not uploaded"
          exit 1
        fi
        
        # Check TFTP logs for upload request
        docker logs tftp-test | grep "WRQ from"

    - name: Test web server functionality
      run: |
        # Stop existing container
        docker stop tftp-test || true
        docker rm tftp-test || true
        
        # Start container with web server enabled
        docker run -d \
          --name tftp-test-web \
          --network host \
          -e TZ=America/Denver \
          -e ENABLE_WEBSERVER=true \
          -v /srv/docker/tftp:/srv/tftp \
          -v /srv/docker/www:/srv/www \
          kaczmar2/tftp-server:test
          
        # Wait for startup
        sleep 3
        
        # Check logs for web server startup message
        docker logs tftp-test-web | grep "Starting mini_httpd"
        docker logs tftp-test-web | grep "Web server enabled"
        
        # Create test HTML and text files in web directory
        echo "<h1>Test Page</h1><p>TFTP Boot Server</p>" | sudo tee /srv/docker/www/index.html
        echo "Web server test content" | sudo tee /srv/docker/www/web-test.txt
        
        # Test web access to index
        sleep 2
        curl -f http://localhost/ | grep "Test Page"
        
        # Test file download via HTTP
        curl -f http://localhost/web-test.txt -o /tmp/web-test
        if diff /tmp/web-test /srv/docker/www/web-test.txt; then
          echo "✅ Web server file access works"
        else
          echo "❌ Web server file access failed"
          exit 1
        fi
        
    - name: Cleanup
      if: always()
      run: |
        docker stop tftp-test tftp-test-web || true
        docker rm tftp-test tftp-test-web || true
        rm -f /tmp/test /tmp/upload-test.txt /tmp/web-test
        sudo rm -f /srv/docker/www/index.html /srv/docker/www/web-test.txt

    - name: Login to Docker Hub
      if: startsWith(github.ref, 'refs/tags/v')
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      if: startsWith(github.ref, 'refs/tags/v')
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      if: startsWith(github.ref, 'refs/tags/v')
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          kaczmar2/tftp-server
          ghcr.io/${{ github.repository_owner }}/tftp-server
        tags: |
          type=semver,pattern={{version}}

    - name: Build and push to registries
      if: startsWith(github.ref, 'refs/tags/v')
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64,linux/arm/v7
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}